#!/Users/pruthvirajadhav/code/aicommit/.venv/bin
import sys
import os
import subprocess
import ollama
import logging
import argparse

def add_changed_files(logger):
    logger.debug("Running git status --porcelain")
    status_output = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True).stdout
    logger.debug(f"Git status output: {status_output}")
    for line in status_output.split('\n'):
        if line.startswith(' M') or line.startswith('??'):
            file_path = line[3:]
            logger.debug(f"Adding file: {file_path}")
            result = subprocess.run(['git', 'add', file_path], capture_output=True, text=True)
            logger.debug(f"Git add result: {result.stdout}")

    # Check if any files were added
    logger.debug("Checking if any files were added")
    if subprocess.run(['git', 'diff', '--cached', '--quiet']).returncode == 0:
        logger.info("No changes to commit.")
        sys.exit(0)

def get_git_changes(logger):
    logger.debug("Running git diff --staged --name-status")
    result = subprocess.run(['git', 'diff', '--staged', '--name-status'], capture_output=True, text=True)
    logger.debug(f"Git diff --name-status result: {result.stdout}")
    return result.stdout.strip()

def analyze_changes(changes, logger):
    prompt = f"""
Below is a summary of all staged changes, coming from the command:

```
git diff --staged --name-status
```

Each line represents a file and its change status:

- `A` means the file was added
- `M` means the file was modified
- `D` means the file was deleted
- `R` means the file was renamed

Please generate a concise, one-line commit message that accurately describes these changes. Do not include source code in your summary.

Changes:
{changes}
"""
    logger.debug(f"Sending prompt to LLM: {prompt}")
    response = ollama.generate(model='llama3.2', prompt=prompt)
    logger.debug(f"LLM response: {response}")
    return response['response'].strip()

def commit_changes(summary, logger):
    logger.debug(f"Committing changes with message: {summary}")
    result = subprocess.run(['git', 'commit', '-m', summary], capture_output=True, text=True)
    logger.debug(f"Git commit result: {result.stdout}")

def main():
    parser = argparse.ArgumentParser(description='Git commit helper with AI-generated summaries.')
    parser.add_argument('-d', '--debug', action='store_true', help='Enable debug logging')
    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG if args.debug else logging.INFO,
                        format='%(asctime)s - %(levelname)s - %(message)s')
    logger = logging.getLogger(__name__)

    logger.debug("Starting script execution")
    logger.debug(f"Changed to directory: {os.getcwd()}")

    add_changed_files(logger)
    logger.debug("Adding changed files")
    logger.debug("Getting git changes")
    changes = get_git_changes(logger)

    if changes:
        while True:
            commit_message = analyze_changes(changes, logger)
            print(f"\nProposed commit message:\n{commit_message}")

            choice = input("Do you want to (a)ccept, (e)dit, (r)egenerate, or (c)ancel? ").lower()

            if choice == 'a':
                logger.debug("User accepted the commit message")
                result = subprocess.run(['git', 'commit', '-m', commit_message], capture_output=True, text=True)
                logger.debug(f"Git commit result: {result.stdout}")
                if result.returncode == 0:
                    logger.info("Changes committed successfully!")
                    break
                else:
                    logger.error("Commit failed. Please check your changes and try again.")
                    sys.exit(1)
            elif choice == 'e':
                logger.debug("User chose to edit the commit message")
                commit_message = input("Enter your commit message: ")
                if commit_message:
                    result = subprocess.run(['git', 'commit', '-m', commit_message], capture_output=True, text=True)
                    logger.debug(f"Git commit result: {result.stdout}")
                    if result.returncode == 0:
                        logger.info("Changes committed successfully with your message!")
                        break
                    else:
                        logger.error("Commit failed. Please check your message and try again.")
                        sys.exit(1)
                else:
                    logger.warning("Empty commit message. Please try again.")
            elif choice == 'r':
                logger.debug("User chose to regenerate the commit message")
                print("Regenerating commit message...")
                continue
            elif choice == 'c':
                logger.info("Commit cancelled.")
                sys.exit(1)
            else:
                logger.warning("Invalid choice. Please try again.")
    else:
        logger.info("No changes to commit.")

if __name__ == "__main__":
    main()
